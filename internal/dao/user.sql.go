// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package dao

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user (
  username, status, email, password, description
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Username    string
	Status      int32
	Email       string
	Password    string
	Description string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Status,
		arg.Email,
		arg.Password,
		arg.Description,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE username = ?
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, status, email, password, description, created_at, updated_at FROM user
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Status,
		&i.Email,
		&i.Password,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, status, email, password, description, created_at, updated_at FROM user
ORDER BY id DESC
LIMIT ?, ?
`

type ListUserParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Status,
			&i.Email,
			&i.Password,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
SET
 status = coalesce(?, status),
 email = coalesce(?, email),
 password = coalesce(?, password),
 description = coalesce(?, description),
 updated_at = NOW()
WHERE username = ?
`

type UpdateUserParams struct {
	Status      sql.NullInt32
	Email       sql.NullString
	Password    sql.NullString
	Description sql.NullString
	Username    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Status,
		arg.Email,
		arg.Password,
		arg.Description,
		arg.Username,
	)
	return err
}
