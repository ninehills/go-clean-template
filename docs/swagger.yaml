basePath: /.
definitions:
  entity.User:
    properties:
      createdAt:
        description: 创建时间
        example: "2020-01-01T00:00:00Z"
        type: string
      description:
        description: 备注
        example: twfbmbsr
        type: string
      email:
        description: 邮箱
        example: xxx@example.com
        type: string
      status:
        description: 用户状态，1代表启用，2代表禁用
        example: 1
        type: integer
      updatedAt:
        description: 更新时间
        example: "2020-01-01T00:00:00Z"
        type: string
      username:
        description: 用户的名称
        example: twfbmbsr
        type: string
    type: object
  httpv1.CreateUserRequest:
    properties:
      confirmPassword:
        type: string
      description:
        maxLength: 140
        minLength: 0
        type: string
      email:
        maxLength: 64
        minLength: 0
        type: string
      password:
        description: 密码的验证比较复杂，有单独的方法进行验证
        type: string
      username:
        description: username 应该是长度1-64位的字母、数字或"_"
        maxLength: 64
        minLength: 1
        type: string
    required:
    - confirmPassword
    - email
    - password
    - username
    type: object
  httpv1.CreateUserResponse:
    properties:
      createdAt:
        description: 创建时间
        example: "2020-01-01T00:00:00Z"
        type: string
      description:
        description: 备注
        example: twfbmbsr
        type: string
      email:
        description: 邮箱
        example: xxx@example.com
        type: string
      status:
        description: 用户状态，1代表启用，2代表禁用
        example: 1
        type: integer
      updatedAt:
        description: 更新时间
        example: "2020-01-01T00:00:00Z"
        type: string
      username:
        description: 用户的名称
        example: twfbmbsr
        type: string
    type: object
  httpv1.DeleteUserResponse:
    type: object
  httpv1.ErrorResponse:
    properties:
      code:
        example: Conflict
        type: string
      message:
        example: message
        type: string
      requestId:
        example: b5953bf0-9f15-4c42-afb4-1c125b40d7ce
        type: string
    type: object
  httpv1.GetUserResponse:
    properties:
      createdAt:
        description: 创建时间
        example: "2020-01-01T00:00:00Z"
        type: string
      description:
        description: 备注
        example: twfbmbsr
        type: string
      email:
        description: 邮箱
        example: xxx@example.com
        type: string
      status:
        description: 用户状态，1代表启用，2代表禁用
        example: 1
        type: integer
      updatedAt:
        description: 更新时间
        example: "2020-01-01T00:00:00Z"
        type: string
      username:
        description: 用户的名称
        example: twfbmbsr
        type: string
    type: object
  httpv1.ListUserResponse:
    properties:
      pageNo:
        type: integer
      pageSize:
        type: integer
      result:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      totalCount:
        type: integer
    type: object
  httpv1.UpdateUserResponse:
    properties:
      createdAt:
        description: 创建时间
        example: "2020-01-01T00:00:00Z"
        type: string
      description:
        description: 备注
        example: twfbmbsr
        type: string
      email:
        description: 邮箱
        example: xxx@example.com
        type: string
      status:
        description: 用户状态，1代表启用，2代表禁用
        example: 1
        type: integer
      updatedAt:
        description: 更新时间
        example: "2020-01-01T00:00:00Z"
        type: string
      username:
        description: 用户的名称
        example: twfbmbsr
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: GO WEBAPP TEMPLATE API
  title: GO WEBAPP TEMPLATE API
  version: "1.0"
paths:
  /v1/users:
    get:
      description: List user with pages
      operationId: list-users
      parameters:
      - description: Page number
        in: query
        name: pageNo
        required: true
        type: integer
      - description: Page size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: Order asc/desc
        in: query
        name: order
        required: true
        type: string
      - description: Order by create_time
        in: query
        name: orderBy
        required: true
        type: string
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Status 1/2
        in: query
        name: status
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpv1.ListUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpv1.ErrorResponse'
      summary: List users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create user, user_id is generated random
      operationId: create-user
      parameters:
      - description: Set up user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpv1.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpv1.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpv1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpv1.ErrorResponse'
      summary: Create user
      tags:
      - user
  /v1/users/:username:
    delete:
      description: Delete user by username
      operationId: delete-user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpv1.DeleteUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpv1.ErrorResponse'
      summary: Delete user
      tags:
      - user
    get:
      description: Get user by username
      operationId: get-user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpv1.GetUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpv1.ErrorResponse'
      summary: Get user
      tags:
      - user
    put:
      description: Update user by username
      operationId: update-user
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpv1.UpdateUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpv1.ErrorResponse'
      summary: Update user
      tags:
      - user
swagger: "2.0"
